<?php

namespace App\Twig;

use Twig\Extension\AbstractExtension;
use Twig\TwigFilter;
use Twig\TwigFunction;

class TwigBootstrapExtension extends AbstractExtension
{

    public function getFunctions():array
    {
//        return parent::getFunctions(); // TODO: Change the autogenerated stub
        return [
            new TwigFunction('cutString', [$this, 'cutStringTwig']),
        ];
    }
//      limite de texte
    public function cutStringTwig($message)
    {
        return substr($message, $start=0, $length=50). '...';
    }

    public function getFilters(): array
    {
//        return parent::getFilters(); // TODO: Change the autogenerated stub
        return [
            new TwigFilter('badge', [$this, 'badgeFilter'], ['is_safe' => ['html'] ]),
            new TwigFilter('safe', [$this, 'safeHtml'], ['is_safe' => ['html']] ),
            new TwigFilter('markdown', [$this, 'markdownParse'], ['is_safe' => ['html']]),
        ];
    }
//    couleur de badge
    public function badgeFilter($content, array $options= []): string
    {
        $defaultOptions = [
            'color'=> 'primary'
        ];
        $options = array_merge($defaultOptions, $options);
        $color = $options['color'];

        return '<span class="badge badge-'. $color.'">'.$content.'</span>';
    }
//    supprimer html des vues
    public function safeHtml($content):string
    {
        return $content;
    }

    public function markdownParse($value): string
    {
        return \Michelf\MarkdownExtra::defaultTransform($value);
    }

}